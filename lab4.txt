#1.

a. CPI = 3(0.6) + n(0.25) + 8(0.15) = 5 -> n = 8

b. ET = 12E-3 = (I * CPI)/f = (I * 5)/(1.5E9) -> I = 3.6E6

c. ET_New = 9.6E-3 = (3.6E6 * CPI)/(1.5E9) -> CPI = 4 = 3(0.6) + k(0.25) + 8(0.15) -> k = 4

#2. 

LINE | $SP  | $RA | $A0 | $V0 
J    | X    | --  | 3   | --
J+4  | X    | R   | 3   | --
P    | X-12 | R   | 3   | --
L    | X-12 | R   | 2   | --
L+4  | X-12 | S   | 2   | -- 
P    | X-24 | S   | 2   | --
T    | X-24 | S   | 2   | 1
T+4  | X-12 | S   | 2   | 1
S    | X-12 | S   | 3   | 1
S+8  | X-12 | S   | 1   | 1
S+12 | X-12 | Q   | 1   | 1
P    | X-24 | Q   | 1   | 1
T    | ---- | --  | --- | --
T+4  | ---- | --  | --- | --
Q    | X-24 | R   | 1   | 2
Q+4  | X-24 | Q   | 1   | 2
Q+12 | X-12 | Q   | 1   | 2
R    | ---- | --  | --- | --

#3. 

ADDRESS    | INSTRUCTION            | TYPE | BINARY                                  | HEXADECIMAL
0x10000000 | bne $a0, $a1, notequal | I    | 0001 0100 1100 0011 0000 0000 0000 0010 | 0x14C30002
0x10000004 | add $t0, $0, $a0 	    | R    | 0000 0000 0000 0011 0011 1000 0010 0000 | 0x00033820
0x10000008 | j done                 | J    | 0000 1000 0000 0000 0000 0000 0000 0100 | 0x08000004
0x1000000C | addi $t0, $0, 1        | I    | 0010 0000 0000 0111 0000 0000 0000 0001 | 0x20070001
0x10000010 | done

#4. 

init:	addi $t0, $0, 1 	#initialize $t0 = i
	addi $v0, $0, 0		#initialize count
main: 	slt  $t1, $t0, $a1
	beq  $t1, $0, done
	lw   $t1, 0($a0)
	slt  $t2, $t1, $0
	addi $t0, $t0, 1
	addi $a0, $a0, 4
	bne  $t2, $0, main
	addi $v0, $v0, 1
	j main
done: 	jr $ra

#5.

a. CPI = 3 = n(0.5) + 8(0.25) + 2(0.25) -> n = 1

b. ET = 4.5E-3 = (I * 3)/(1E9) -> I = 1.5E6

c. ET_New = 3.375E-3 = (1.5E6 * CPI)/(1E9) -> CPI = 2.25 = (0.5) + k(0.25) + 2(0.25) -> k = 5

#6.

.globl main
.globl classmarks
.globl compare

.text

main:   addi  $sp, $sp, -12     #establish new frame. decrement the stack pointer
	sw    $ra, 8($sp)       #save return address
	sw    $fp, 4($sp)       #save old frame pointer
        addi  $fp, $sp, 12      #set frame pointer
	li    $a0, 3		#set M = 3
	li    $a1, 0x10010000	#set MARKS1
	addiu $a2, $a1, 16	#set MARKS2
	addiu $a3, $a2, 16	#set FINAL_MARKS
	li    $t0, 44
	sw    $t0, 0($a1)
	li    $t0, 45
	sw    $t0, 4($a1)
	li    $t0, 43
	sw    $t0, 8($a1)
	li    $t0, 43
	sw    $t0, 0($a2)
	li    $t0, 47
	sw    $t0, 4($a2)
	li    $t0, 42 
	sw    $t0, 8($a2)
	jal   classmarks
	lw    $ra, 8($sp)
	lw    $fp, 4($sp)
	addi  $sp, $sp, 12
	jr    $ra

classmarks:  addi $sp, $sp, -36  #set aside space for the stack frame. 
				 #for save registers, frame pointers, return
	     sw   $fp, 4($sp)	 #save old frame pointer
	     sw   $ra, 8($sp)    #save return address
	     
	     sw   $s1, 12($sp)   #save save registers
	     sw   $s2, 16($sp)
	     sw   $s3, 20($sp)
	     sw   $s4, 24($sp)
             sw   $s5, 28($sp)
             sw   $s6, 32($sp)
             sw   $s7, 36($sp)
	 
	     addi $fp, $sp, 36 #set frame pointer

             addi $s0, $s0, 0 	 #initialize i
	     addi $s1, $a0, 0 	 #put m = 3 into a saved register
	     sw   $s2, 0($a1)    #store first element of MARKS1
	     sw   $s3, 0($a2)    #same as above but with MARKS2
             sw   $s4, 0($a3)    #same as above but with FINAL_MARKS
loop:        slt  $t1, $s0, $s1 
	     beq  $t1, $0, finish
	     lw   $t2, 0($s2)    #MARKS1[i]
             lw   $t3, 0($s3)    #MARKS2[i]
	     jal  compare
	     slt  $t1, $s5, $0   #returns 1 if $s5 < 0
             beq  $t1, $0, else  #if $s5 > 0
             sw   $s3, 0($s4) 	 #store MARKS2 into FINAL_MARKS
             j    increment
else:        sw   $s2, 0($s4)    #store MARKS1 into FINAL_MARKS
increment:   addi $s0, $s0, 1    #increment the pointers in each of the respective arrays
	     addi $a1, $a1, 4
	     addi $a2, $a2, 4
             addi $a3, $a3, 4
	     j    loop           #jump back to loop
finish:      lw   $fp, 4($sp)    #restore the frame pointer
	     lw   $ra, 8($sp)    #restore the return address 
	     lw   $s1, 12($sp)   #restore the saved save registers
	     lw   $s2, 16($sp)   
 	     lw   $s3, 20($sp) 
	     lw   $s4, 24($sp)
             lw   $s5, 28($sp)
             lw   $s6, 32($sp)
             lw   $s7, 36($sp)
             addi $sp, $sp, 36   #restore the stack pointer
             jr   $ra            #return to the old $ra

compare:     sub  $s5, $t2, $t3  #compare the two numbers
    	     jr   $ra  
