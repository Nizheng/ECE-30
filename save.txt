1A.

li $a0, 44
add $a1, $a2, $0

1B. 

beq $t0, $t1, label
li $a0, 1
j ends
label: li $a0, 0
end:

1C. 
slt $a0, $t0, $t1

1D.

beq $t0, $t1, equals
slt $a0, $t0, $t1
j end
equals: addi $a0, $0, 1
end:

1E. (TODO)

ADDRESS IN HEX | MIPS INSTRUCTION | BINARY MACHINE LANGUAGE | MACHINE LANGUAGE

#R-TYPE: OPP CODE | REGISTER SOURCE | REGISTER TARGET | REGISTER DESTINATION |
SHIFT | FUNCTION

#I-TYPE: OPP CODE | REGISTER SOURCE | REGISTER DESTINATION | CONSTANT

#J-TYPE: OPP CODE | JUMP ADDRESS

0x10000000 | beq $t0, $t1, equals    | 0001 0001 0000 1001 0000 0000 0000 0010 | 0x11090002
0x10000004 | slt $a0, $t0, $t1       | 0000 0001 0000 1001 0010 0000 0010 1010 | 0x0109202A
0x10000008 | j end                   | 0000 1000 0000 0000 0000 0000 0000 0100 | 0x08000004  
0x1000000C | equals: addi $a0, $0, 1 | 0010 0000 0000 0000 0000 0000 0000 0001 | 0x21000001
0x10000010 | end: 

2A.


3. 
initialize: addi $s0, $0, 0
	    addi $s1, $0, 5
main: sw $s1, 0($t0)
      addi $s1, $s1, 1
      addi $t0, $t0, 4
      bne $s0, $s1, main

4. 
initialize: addi $s0, $0, 0	#initialize i
	    addi $s1, $0, 40    #end condition
main: 	    beq $s0, $s1, end	#check condition 
      	    add $t1, $a1, $s0	#store address of b[i] into $t1
	    lw $s3, 0($t1)	#load b[i] into $s3
	    add $t2, $s3, $s0 	#calculate b[i] + i
	    add $t3, $s0, $s0   #make 2*i
	    add $t4, $a1, $t3	#store address of a[2i] into $t4
	    sw $t2, 0($t4) 	#store the value of b[i] + i
	    add $s0, $s0, 4 	#increment $s0 by four
	    j main		#loop back to main 
	    
end:



------------------------------------------------------------------------extra code
initalize: addi $s0, $0, 0	#initialize i
	    addi $s1, $0, 10	#end condition
main: beq $s0, $s1, end		#check condition
      sll $s2, $s0, 2 		#increment i by 4, since 32-bit
      add $s3, $a1, $t2		#find address of b[i]
end:







