1A.

li $a0, 44
add $a1, $a2, $0

1B. 

beq $t0, $t1, label
li $a0, 1
j ends
label: li $a0, 0
end:

1C. 
slt $a0, $t0, $t1

1D.

beq $t0, $t1, equals
slt $a0, $t0, $t1
j end
equals: addi $a0, $0, 1
end:

1E. (TODO)

ADDRESS IN HEX | MIPS INSTRUCTION | BINARY MACHINE LANGUAGE | MACHINE LANGUAGE

#R-TYPE: OPP CODE | REGISTER SOURCE | REGISTER TARGET | REGISTER DESTINATION |
SHIFT | FUNCTION

#I-TYPE: OPP CODE | REGISTER SOURCE | REGISTER DESTINATION | CONSTANT

#J-TYPE: OPP CODE | JUMP ADDRESS

0x10000000 | beq $t0, $t1, equals    | 0001 0001 0000 1001 0000 0000 0000 0010 | 0x11090002
0x10000004 | slt $a0, $t0, $t1       | 0000 0001 0000 1001 0010 0000 0010 1010 | 0x0109202A
0x10000008 | j end                   | 0000 1000 0000 0000 0000 0000 0000 0100 | 0x08000004  
0x1000000C | equals: addi $a0, $0, 1 | 0010 0000 0000 0000 0000 0000 0000 0001 | 0x21000001
0x10000010 | end: 

2A.


3. 
initialize: addi $s0, $0, 0
	    addi $s1, $0, 5
main: sw $s1, 0($t0)
      addi $s1, $s1, 1
      addi $t0, $t0, 4
      bne $s0, $s1, main

4.
